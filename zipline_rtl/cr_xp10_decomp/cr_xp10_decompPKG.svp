/*************************************************************************
*
* Copyright © Microsoft Corporation. All rights reserved.
* Copyright © Broadcom Inc. All rights reserved.
* Licensed under the MIT License.
*
*************************************************************************/

`ifndef __CR_XP10_DECOMPPKG_SVP
  `define __CR_XP10_DECOMPPKG_SVP

package cr_xp10_decompPKG;
   import crPKG::*;
   

 


   localparam HUFD_STAT_EVENTS_BASE = HUFD_FE_XP9_FRM_TOTAL;
   localparam HUFD_STAT_EVENTS_LIMIT = HUFD_SDD_BUF_FULL_STALL_TOTAL;

   localparam LZ77D_STAT_EVENTS_BASE = LZ77D_PTR_LEN_256_TOTAL;
   localparam LZ77D_STAT_EVENTS_LIMIT = LZ77D_STALL_TOTAL;



 




   
   
   
   
   localparam N_SDD_BIT_BUF_WORDS = 30;

   localparam logic [2:0] HLIT_EXTRA_BITS[0:31] = '{0, 0, 0, 0, 0, 0, 0, 0,
                                                    0, 1, 1, 1, 1, 2, 2, 2,
                                                    2, 3, 3, 3, 3, 4, 4, 4,
                                                    4, 5, 5, 5, 5, 0, 0, 0};
   
   localparam logic [8:0] HLIT_BASE_LENGTH[0:31] = '{0, 3, 4, 5, 6, 7, 8, 9,
                                                     10, 9, 11, 13, 15, 15, 19, 23,
                                                     27, 27, 35, 43, 51, 51, 67, 83,
                                                     99, 99, 131, 163, 195, 258, 259, 260};
   
   localparam logic [3:0] HDIST_EXTRA_BITS[0:31] = '{0, 0, 0, 0, 1, 1, 2, 2,
                                                     3, 3, 4, 4, 5, 5, 6, 6,
                                                     7, 7, 8, 8, 9, 9, 10 , 10,
                                                     11, 11, 12, 12, 13, 13, 0, 0};
   
   localparam logic [14:0] HDIST_BASE_DISTANCE[0:31] = '{0, 1, 2, 3, 3, 5, 5, 9,
                                                         9, 17, 17, 33, 33, 65, 65, 129,
                                                         129, 257, 257, 513, 513, 1025, 1025, 2049,
                                                         2049, 4097, 4097, 8193, 8193, 16385, 0, 0};
            
   function automatic logic [`AXI_S_DP_DWIDTH:0] align_data;
      input [`AXI_S_DP_DWIDTH:0] cur_data;
      input [`AXI_S_DP_DWIDTH:0] prev_data;
      input [$clog2(`AXI_S_DP_DWIDTH):0]  align_offset;
                
      logic [`AXI_S_DP_DWIDTH:0] wd1;
      logic [`AXI_S_DP_DWIDTH:0] wd2;
      logic [`AXI_S_DP_DWIDTH:0] msk1;
      logic [`AXI_S_DP_DWIDTH:0] msk2;
      logic [$clog2(`AXI_S_DP_DWIDTH):0]  inv_align_offset;
      logic [`AXI_S_DP_DWIDTH:0] wd2_msk2;
      logic [`AXI_S_DP_DWIDTH:0] n_wd1;
      logic [`AXI_S_DP_DWIDTH:0] n_wd2;

      begin
         inv_align_offset = $bits(inv_align_offset)'(`AXI_S_DP_DWIDTH - align_offset);
         wd1 = prev_data >> align_offset;
         msk1 = {64{1'b1}} >> align_offset;
         n_wd1 = (wd1 & msk1);
                
         wd2 = cur_data;
         msk2 = {64{1'b1}} >> inv_align_offset;
         wd2_msk2 = (wd2 & msk2);
         n_wd2 = wd2_msk2 << inv_align_offset;

         align_data = n_wd1 | n_wd2;
      end
    endfunction 

   
   
   

   typedef struct packed {
      logic [63:0] data;
      logic        last;
      logic        trace_bit;
   } bhp_htf_hdr_dp_bus_t;

   
   

   typedef enum logic [2:0] 
                {HTF_FMT_XP9=0, 
                 HTF_FMT_XP10=1, 
                 HTF_FMT_DEFLATE_DYNAMIC=2,
                 HTF_FMT_DEFLATE_FIXED=3,
                 HTF_FMT_RAW=4} htf_fmt_e;

   typedef enum logic [1:0]
                {HTF_SUB_FMT_NORMAL_GZIP=0,
                 HTF_SUB_FMT_CHU4K_ZLIB=1,
                 HTF_SUB_FMT_CHU8K=2} htf_sub_fmt_e;

   typedef struct packed {
      logic [22:0] hdr_bits_in;
      logic [15:0] rqe_sched_handle;
      logic [10:0] tlv_frame_num;
      logic [3:0]  tlv_eng_id;
      logic [7:0]  tlv_seq_num;
   } sched_info_t;      

   typedef struct  packed {
      htf_fmt_e     fmt;
      htf_sub_fmt_e sub_fmt;
      logic [2:0]   winsize;
      logic         min_ptr_len;
      logic         min_mtf_len;
      logic         trace_bit;
      logic         phd_present;
      logic         sof_blk;
      logic [22:0]  hdr_bits_in;
      logic [15:0]  rqe_sched_handle;
      logic [10:0]  tlv_frame_num;
      logic [3:0]   tlv_eng_id;
      logic [7:0]   tlv_seq_num;
   } bhp_htf_hdrinfo_bus_t;

   
   
   
   typedef struct  packed {
      logic [12:0] size;
      zipline_error_e error;
   } htf_bhp_status_bus_t;
   
   

   typedef struct  packed {
      logic [15:0] offset0;
      logic [4:0]  exp0;
      logic [15:0] offset1;
      logic [4:0]  exp1;
      logic [15:0] offset2;
      logic [4:0]  exp2;
      logic [15:0] offset3;
      logic [4:0]  exp3;
      logic        ptr_last;
      logic        format;
      logic        present;
      logic        trace_bit;
   } bhp_mtf_hdr_bus_t;

   

   typedef struct  packed {
      logic [63:0] data;
      logic [6:0]  numbits;
      logic        sob;
      logic        eob;
      logic        eof;
      logic        trace_bit;
      logic [27:0] frame_bytes_in;
      logic        last_frame;
      zipline_error_e error;
   } lfa_sdd_dp_bus_t;

   typedef struct  packed {
      logic        eob;
      logic        err;
      logic [6:0]  numbits;
   } sdd_lfa_ack_bus_t;

   
   

   typedef struct  packed {
      logic [63:0] data;
      logic [2:0]  crc_frm_fmt;
      logic [31:0] isize;
   } lfa_be_crc_bus_t;

   

   typedef struct  packed {
      logic [63:0] data;
      logic        last;
      logic        trace_bit;
   } fhp_htf_bl_bus_t;

   
   

   typedef struct  packed {
      logic        prefix_type; 
      logic [6:0]  data_sz; 
      logic        trace_bit;
   } fhp_lz_prefix_hdr_bus_t;

   
   

   typedef struct  packed {
      logic [63:0] data;
      logic        sof;
      logic        prefix_type; 
      logic        last;
   } fhp_lz_prefix_dp_bus_t;

   

   typedef struct  packed {
      tlvp_if_bus_t data;
      logic        data_type;
   } fhp_be_dp_bus_t;

   
   typedef struct packed {
      logic       last;
      logic [27:0] frm_bytes;
   } fe_eof_bus_t;
   
   

   typedef struct  packed {
      logic [63:0] data;
   } fhp_lz_dbg_data_bus_t;


   

   typedef struct  packed {
      logic [63:0] data;
      logic [7:0]  bytes_valid;
      logic [1:0]  data_type;
   } lz_be_dp_bus_t;

   
   typedef struct  packed {
      logic        lit_valid;
      logic        ptr_valid;
      logic [7:0]  lit_data;
      logic [15:0] ptr_offset;
      logic [15:0] ptr_length;
      }
     lz77_t;

   typedef struct packed {
      logic       lit_valid;
      logic [2:0] lit_cnt;
      logic       ptr_valid;
      logic [31:0] data;
      logic        eof_valid;
      logic        eob_valid;
   } sym_t;

   typedef struct packed {
      logic [63:0] data;
      logic        sof;
      logic [2:0]  bytes_valid;
      logic        eof;
      logic        eob;
   } fe_dp_bus_t;

   typedef struct packed {
      cmd_comp_mode_e sof_fmt;
      logic       trace_bit;
      logic       phd_present;
      logic [16:0] pfx_sz;
      logic [15:0] rqe_sched_handle;
      logic [10:0] tlv_frame_num;
      logic [3:0]  tlv_eng_id;
      logic [7:0]  tlv_seq_num;
      zipline_error_e error;
   } fe_sof_bus_t;

   typedef struct packed {
      fe_sof_bus_t sof_data;
      logic [9:0] addr;
   } sof_fifo_t;

   typedef struct packed {
      logic [9:0] eof_addr;
      logic [27:0] frm_bytes;
      logic        last;
   } eof_fifo_t;
   
   typedef struct packed {
      logic [12:0] hdr_size;
      logic [31:0] data_size;
      logic [31:0] orig_size; 
      logic [31:0] cum_size;
      logic        skip_stbl;
      logic        last_blk;
      logic        crc_option;
      zipline_error_e  error;
   } bhp_lfa_status_bus_t;

   typedef enum logic [1:0] {ILLEGAL_HUFFTREE, INVALID_SYMBOL, END_MISMATCH, MISSING_EOB_SYM} sdd_error_e; 

   typedef enum logic [2:0] {BUF_IDX_ADV, LITERAL, MATCH, EOB, EOF} sdd_symbol_e;

   
   
   
   typedef struct packed {
      sdd_symbol_e                               symbol_type;    
      logic [`LOG_VEC(`N_MAX_HUFF_BITS+1)]       ss_length;      
      logic [`LOG_VEC(`N_XP10_64K_SHRT_SYMBOLS)] ss_base_offset; 
      logic [`LOG_VEC(`N_XP10_64K_SHRT_SYMBOLS)] ss_sat_entry;   
      logic [`LOG_VEC(`N_XP10_64K_SHRT_SYMBOLS)] ss_sym;         
      logic                                      ll_exists;       
      logic [`LOG_VEC(`N_MAX_HUFF_BITS+1)]       ll_length;       
      logic [`LOG_VEC(`N_XP10_64K_LONG_SYMBOLS)] ll_base_offset;  
      logic [`LOG_VEC(`N_XP10_64K_LONG_SYMBOLS)] ll_sat_entry;    
      logic [`LOG_VEC(`N_XP10_64K_LONG_SYMBOLS)] ll_sym;          
      logic [`BIT_VEC(`N_MAX_HUFF_BITS)]         ll_bits;
      logic [6:0]                                aggregate_length;
      logic [7:0]                                end_idx;         
      logic                                      error;
      logic                                      ll_error;
      sdd_error_e                                sdd_errcode;     
      logic                                      eob;             
   } sdd_ld_lane_state_t;

   typedef struct packed {
      logic [`BIT_VEC($clog2(N_SDD_BIT_BUF_WORDS)+1)] buf_idx;
      logic [2:0]                            word_mod_8;
      logic                                  trace_bit;
      logic [7:0]   numbits;
      logic         sob;
      logic         eob;
      logic         eof;
      zipline_error_e errcode;
      logic         table_bank;
      htf_fmt_e     fmt;
      logic         min_ptr_len;
      logic         min_mtf_len;
      logic [27:0]  frame_bytes_in;
      logic         last_frame;
      logic [127:0] data; 
   } sdd_ld_metadata_t;                          


   typedef struct packed {
      sdd_ld_metadata_t          meta;      
      sdd_ld_lane_state_t [31:0] lane_state;
   } sdd_ld_pipe_t;

   typedef struct packed {
      sdd_symbol_e symbol_type;                                    
      htf_fmt_e    fmt;                                            
      logic        min_ptr_len;                                    
      logic        min_mtf_len;                                    
      logic [`LOG_VEC(`N_MAX_HUFF_BITS+1)] ss_length;              
      logic [`LOG_VEC(`N_XP10_64K_SHRT_SYMBOLS)] ss_sym;           
      logic                                      ll_exists;        
      logic [`LOG_VEC(`N_XP10_64K_LONG_SYMBOLS)] ll_sym;           
      logic [6:0]                                aggregate_length; 
      logic [`BIT_VEC($clog2(N_SDD_BIT_BUF_WORDS*32)+1)]         start_idx;  
      logic                                            trace_bit;  
   } sdd_ss_partial_symbol_t;

   typedef struct packed {
      logic [3:0] valid_symbols;
      logic       sob; 
      logic       eob; 
      logic       err; 
      logic       eof;
      zipline_error_e eof_errcode;
      sdd_error_e sdd_errcode;
      logic [27:0] frame_bytes_in;
      logic        last_frame;
      sdd_ss_partial_symbol_t [3:0] symbols;
   } sdd_ss_pipe_t;

   typedef enum logic [4:0] {SYMTAB_IDLE,
                             XP9_SS_HEADER,
                             XP10_SS_HEADER,
                             XP_SS_DELTA_DECODE,
                             XP_SS_RETRO_DECODE,
                             XP_SS_SIMPLE,
                             SS_PREDEF,
                             XP9_LL_HEADER,
                             XP10_LL_HEADER,
                             XP_LL_DELTA_DECODE,
                             XP_LL_RETRO_DECODE,
                             XP_LL_SIMPLE,
                             LL_PREDEF,
                             WAIT_FOR_STATUS_READY,
                             STATUS_ERROR,
                             RAW_BLOCK,
                             DEFLATE_HEADER,
                             DEFLATE_GET_CODELEN,
                             DEFLATE_WRITE_CODELEN,
                             DEFLATE_HLIT_DYNAMIC,
                             DEFLATE_HDIST_DYNAMIC,
                             DEFLATE_HLIT_FIXED,
                             DEFLATE_HDIST_FIXED,
                             DEFLATE_WAIT_DYNAMIC,
                             DEFLATE_WAIT_FIXED} htf_symtab_state_e;
   
   typedef logic [24:0] htf_symtab_state_t;

   typedef enum logic [1:0] {HUFFMAN=0,
                             EXTRA_2=1,
                             EXTRA_3=2,
                             EXTRA_7=3} htf_symtab_sub_state_e;

   typedef logic [3:0] htf_symtab_sub_state_t;

   
endpackage : cr_xp10_decompPKG

`endif 
